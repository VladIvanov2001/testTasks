[{"C:\\GH\\testTasks\\game\\src\\index.tsx":"1","C:\\GH\\testTasks\\game\\src\\reportWebVitals.ts":"2","C:\\GH\\testTasks\\game\\src\\App.tsx":"3","C:\\GH\\testTasks\\game\\src\\Game.ts":"4","C:\\GH\\testTasks\\game\\src\\constants.ts":"5","C:\\GH\\testTasks\\game\\src\\types\\types.ts":"6","C:\\GH\\testTasks\\game\\src\\classes\\targets\\MultiTarget.ts":"7","C:\\GH\\testTasks\\game\\src\\components\\GameOver\\GameOver.tsx":"8","C:\\GH\\testTasks\\game\\src\\components\\InfoPanel\\InfoPanel.tsx":"9","C:\\GH\\testTasks\\game\\src\\components\\GameField\\GameField.tsx":"10","C:\\GH\\testTasks\\game\\src\\classes\\TurnGenerator.ts":"11","C:\\GH\\testTasks\\game\\src\\classes\\Randomizer.ts":"12","C:\\GH\\testTasks\\game\\src\\classes\\board\\GameBoardAction.ts":"13","C:\\GH\\testTasks\\game\\src\\classes\\board\\GameBoard.ts":"14","C:\\GH\\testTasks\\game\\src\\classes\\board\\UnitAction.ts":"15","C:\\GH\\testTasks\\game\\src\\components\\Turn\\Turn.tsx":"16","C:\\GH\\testTasks\\game\\src\\components\\UnitAction\\UnitAction.tsx":"17","C:\\GH\\testTasks\\game\\src\\components\\SingleUnit\\SingleUnit.tsx":"18","C:\\GH\\testTasks\\game\\src\\classes\\targets\\SingleTarget.ts":"19","C:\\GH\\testTasks\\game\\src\\classes\\models\\Archimage.ts":"20","C:\\GH\\testTasks\\game\\src\\classes\\models\\Bandit.ts":"21","C:\\GH\\testTasks\\game\\src\\classes\\models\\Bishop.ts":"22","C:\\GH\\testTasks\\game\\src\\classes\\models\\Centaur.ts":"23","C:\\GH\\testTasks\\game\\src\\classes\\models\\ElfArcher.ts":"24","C:\\GH\\testTasks\\game\\src\\classes\\models\\Monk.ts":"25","C:\\GH\\testTasks\\game\\src\\classes\\models\\Sirena.ts":"26","C:\\GH\\testTasks\\game\\src\\classes\\models\\Skeleton.ts":"27","C:\\GH\\testTasks\\game\\src\\classes\\models\\SkeletonMage.ts":"28","C:\\GH\\testTasks\\game\\src\\constants\\constants.ts":"29","C:\\GH\\testTasks\\game\\src\\components\\GeneralUnitImage\\GeneralUnitImage.tsx":"30","C:\\GH\\testTasks\\game\\src\\components\\UnitInfo\\UnitInfo.tsx":"31","C:\\GH\\testTasks\\game\\src\\classes\\Unit.ts":"32","C:\\GH\\testTasks\\game\\src\\classes\\range\\RangeType.ts":"33","C:\\GH\\testTasks\\game\\src\\classes\\range\\MeleeType.ts":"34","C:\\GH\\testTasks\\game\\src\\classes\\actions\\attack\\Attacker.ts":"35","C:\\GH\\testTasks\\game\\src\\classes\\actions\\health\\Healer.ts":"36","C:\\GH\\testTasks\\game\\src\\classes\\actions\\paralyze\\Paralyze.ts":"37","C:\\GH\\testTasks\\game\\src\\components\\UnitDealValue\\UnitDealValue.tsx":"38","C:\\GH\\testTasks\\game\\src\\components\\UnitHP\\UnitHP.tsx":"39","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\index.tsx":"40","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\ArchimageImage.tsx":"41","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\BanditImage.tsx":"42","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\BishopImage.tsx":"43","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\CentaurImage.tsx":"44","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\ElfArcher.tsx":"45","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\MonkImage.tsx":"46","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\Siren.tsx":"47","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\SkeletonImage.tsx":"48","C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\SkeletonMageImage.tsx":"49"},{"size":500,"mtime":1612432180026,"results":"50","hashOfConfig":"51"},{"size":454,"mtime":1612432180059,"results":"52","hashOfConfig":"51"},{"size":3625,"mtime":1612735721149,"results":"53","hashOfConfig":"51"},{"size":1655,"mtime":1612734137087,"results":"54","hashOfConfig":"51"},{"size":49,"mtime":1612722489215,"results":"55","hashOfConfig":"51"},{"size":630,"mtime":1612733239790,"results":"56","hashOfConfig":"51"},{"size":268,"mtime":1612432179728,"results":"57","hashOfConfig":"51"},{"size":502,"mtime":1612735548780,"results":"58","hashOfConfig":"51"},{"size":1226,"mtime":1612726124383,"results":"59","hashOfConfig":"51"},{"size":1739,"mtime":1612742062837,"results":"60","hashOfConfig":"51"},{"size":3034,"mtime":1612726107974,"results":"61","hashOfConfig":"51"},{"size":1503,"mtime":1612726149447,"results":"62","hashOfConfig":"51"},{"size":6569,"mtime":1612733117637,"results":"63","hashOfConfig":"51"},{"size":621,"mtime":1612730137170,"results":"64","hashOfConfig":"51"},{"size":3618,"mtime":1612734402796,"results":"65","hashOfConfig":"51"},{"size":1202,"mtime":1612741243811,"results":"66","hashOfConfig":"51"},{"size":636,"mtime":1612735698010,"results":"67","hashOfConfig":"51"},{"size":1050,"mtime":1612714887127,"results":"68","hashOfConfig":"51"},{"size":535,"mtime":1612432179737,"results":"69","hashOfConfig":"51"},{"size":479,"mtime":1612710950287,"results":"70","hashOfConfig":"51"},{"size":473,"mtime":1612711153349,"results":"71","hashOfConfig":"51"},{"size":465,"mtime":1612711153377,"results":"72","hashOfConfig":"51"},{"size":476,"mtime":1612711236177,"results":"73","hashOfConfig":"51"},{"size":480,"mtime":1612711236164,"results":"74","hashOfConfig":"51"},{"size":444,"mtime":1612711276307,"results":"75","hashOfConfig":"51"},{"size":454,"mtime":1612711276274,"results":"76","hashOfConfig":"51"},{"size":478,"mtime":1612711276289,"results":"77","hashOfConfig":"51"},{"size":483,"mtime":1612711291941,"results":"78","hashOfConfig":"51"},{"size":38,"mtime":1612507543204,"results":"79","hashOfConfig":"51"},{"size":759,"mtime":1612740023750,"results":"80","hashOfConfig":"51"},{"size":587,"mtime":1612735697995,"results":"81","hashOfConfig":"51"},{"size":2891,"mtime":1612710484868,"results":"82","hashOfConfig":"51"},{"size":652,"mtime":1612710484815,"results":"83","hashOfConfig":"51"},{"size":982,"mtime":1612735786648,"results":"84","hashOfConfig":"51"},{"size":905,"mtime":1612710484891,"results":"85","hashOfConfig":"51"},{"size":1044,"mtime":1612710582418,"results":"86","hashOfConfig":"51"},{"size":862,"mtime":1612710673356,"results":"87","hashOfConfig":"51"},{"size":989,"mtime":1612735697934,"results":"88","hashOfConfig":"51"},{"size":267,"mtime":1612735697948,"results":"89","hashOfConfig":"51"},{"size":654,"mtime":1612432179933,"results":"90","hashOfConfig":"51"},{"size":159,"mtime":1612736374113,"results":"91","hashOfConfig":"51"},{"size":150,"mtime":1612736469312,"results":"92","hashOfConfig":"51"},{"size":150,"mtime":1612736469303,"results":"93","hashOfConfig":"51"},{"size":153,"mtime":1612736469251,"results":"94","hashOfConfig":"51"},{"size":160,"mtime":1612736469226,"results":"95","hashOfConfig":"51"},{"size":144,"mtime":1612736469273,"results":"96","hashOfConfig":"51"},{"size":147,"mtime":1612736469283,"results":"97","hashOfConfig":"51"},{"size":156,"mtime":1612736469293,"results":"98","hashOfConfig":"51"},{"size":169,"mtime":1612736469326,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1w702f",{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"102"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"102"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"102"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"C:\\GH\\testTasks\\game\\src\\index.tsx",[],[],"C:\\GH\\testTasks\\game\\src\\reportWebVitals.ts",["204"],"import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import(\"web-vitals\").then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","C:\\GH\\testTasks\\game\\src\\App.tsx",[],"C:\\GH\\testTasks\\game\\src\\Game.ts",["205"],"import { boardLocation, Team, TypeOfAction, unit } from \"./types/types\";\nimport { Unit } from \"./classes/Unit\";\nimport { Queue } from \"./classes/TurnGenerator\";\nimport { GameBoardAction } from \"./classes/board/GameBoardAction\";\nimport { Randomizer } from \"./classes/Randomizer\";\nimport { GameBoard } from \"./classes/board/GameBoard\";\nimport { UnitAction } from \"./classes/board/UnitAction\";\n\ntype initialGameData = {\n  units: unit[][];\n  queueSwitcher: Queue;\n  unitAction: UnitAction;\n};\n\nexport class Game {\n  static gameBoardAction: GameBoardAction;\n  static queueSwitcher: Queue;\n\n  static start(rowsCount: number, columnsCount: number): initialGameData {\n    const randomizer = new Randomizer();\n    const gameBoard = new GameBoard(rowsCount, columnsCount);\n    gameBoard.fillWithUnits(randomizer.generateGameBoard(rowsCount, columnsCount));\n    this.gameBoardAction = new GameBoardAction(gameBoard);\n    const units = gameBoard.getBoardMatrix();\n    this.queueSwitcher = new Queue(units, randomizer);\n    const unitAction = new UnitAction(this.gameBoardAction, gameBoard, this.queueSwitcher);\n\n    return {\n      units,\n      queueSwitcher: this.queueSwitcher,\n      unitAction,\n    };\n  }\n\n  static finish(currentUnit: Unit): { isFinished: boolean; currentTeam: Team } {\n    return {\n      isFinished: !this.gameBoardAction\n        .getAllEnemiesLocation(this.gameBoardAction.getUnitBoardLocation(currentUnit) as boardLocation)\n        .some((enemyLocation) => this.gameBoardAction.isAlive(enemyLocation)),\n      currentTeam: this.gameBoardAction.getTeamOfUnit(this.gameBoardAction.getUnitBoardLocation(currentUnit) as boardLocation),\n    };\n  }\n}\n","C:\\GH\\testTasks\\game\\src\\constants.ts",[],"C:\\GH\\testTasks\\game\\src\\types\\types.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\targets\\MultiTarget.ts",[],"C:\\GH\\testTasks\\game\\src\\components\\GameOver\\GameOver.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\InfoPanel\\InfoPanel.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\GameField\\GameField.tsx",[],"C:\\GH\\testTasks\\game\\src\\classes\\TurnGenerator.ts",["206","207"],"import { Unit } from \"./Unit\";\nimport { unit } from \"../types/types\";\nimport { Randomizer } from \"./Randomizer\";\n//this class describes move l\nexport class Queue {\n  queueList: Unit[];\n  currentUnit: Unit;\n  queueSwitcher: Generator<Unit>;\n\n  constructor(units: unit[][], randomizer: Randomizer) {\n    this.queueSwitcher = this.queueGenerator();\n    this.queueList = this.randomUnitWithEqualInitiative(\n      units.filter((aliveUnit) => aliveUnit) as Unit[][]\n    ).reduce((accumulator, currentArray) => [\n      ...accumulator,\n      ...randomizer\n        .shuffleListSequance(currentArray),\n    ]);\n    this.currentUnit = this.queueList[0];\n  }\n\n  skipUnit(): boolean {\n    return (\n      !this.currentUnit ||\n      this.currentUnit.getInitiative() === 0 ||\n      this.currentUnit.getHP() <= 0\n    );\n  }\n\n  getCurrentUnit(): Unit {\n    return this.currentUnit;\n  }\n\n  getUnitOrder(): Unit[] {\n    return this.queueList.filter((u) => this.isUnitCanAct(u));\n  }\n\n  sortByInitiative(units: Unit[][]) {\n    const initiativeList: Unit[] = units.flat();\n    return initiativeList.sort((a, b) => {\n      return a.getInitiative() - b.getInitiative();\n    });\n  }\n\n  randomUnitWithEqualInitiative(units: Unit[][]): Unit[][] {\n    const sortedUnitList = this.sortByInitiative(units);\n    const splitedByEqualInitiativeArrays: Unit[][] = [];\n\n    let tempArr = [];\n    for (let i = sortedUnitList.length - 1; i >= 0; i -= 1) {\n      if (\n        i !== sortedUnitList.length - 1 &&\n        sortedUnitList[i].getInitiative() !== sortedUnitList[i + 1].getInitiative()\n      ) {\n        splitedByEqualInitiativeArrays.push(tempArr);\n        tempArr = [];\n      }\n      tempArr.push(sortedUnitList[i]);\n      if (i === 0) {\n        splitedByEqualInitiativeArrays.push(tempArr);\n      }\n    }\n\n    return splitedByEqualInitiativeArrays;\n  }\n\n  *queueGenerator() {\n    while (true) {\n      yield* this.queueList;\n    }\n  }\n\n  isUnitCanAct(unit: Unit): boolean {\n    return unit.getHP() > 0 && unit.getInitiative() > 0;\n  }\n\n  next(): Unit {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    this.currentUnit = this.queueSwitcher.next().value;\n    while (this.currentUnit?.getInitiative() === 0) {\n      this.deleteParalyzation();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      this.currentUnit = this.queueSwitcher.next().value;\n    }\n    while (this.skipUnit()) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      this.currentUnit = this.queueSwitcher.next().value;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    if (this.currentUnit === this.queueList.filter(this.isUnitCanAct)[0]) {\n      this.newRound();\n    }\n\n    return this.currentUnit;\n  }\n\n  newRound(): void {\n    this.queueList\n      .filter((unit) => unit && unit.getHP() > 0)\n      .forEach((unit) => {\n        unit.setIsDefending(false);\n      });\n  }\n\n  deleteParalyzation(): void {\n    this.currentUnit.setInitiative(this.currentUnit.getOriginInitiative());\n  }\n}\n","C:\\GH\\testTasks\\game\\src\\classes\\Randomizer.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\board\\GameBoardAction.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\board\\GameBoard.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\board\\UnitAction.ts",[],"C:\\GH\\testTasks\\game\\src\\components\\Turn\\Turn.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitAction\\UnitAction.tsx",["208","209"],"//this component is used for action choice: type of action or defence\nimport React,  { Dispatch, ReactElement, SetStateAction } from \"react\";\n\ninterface IUnitAction {\n  toSelectTarget: boolean;\n  setToSelectTarget: Dispatch<SetStateAction<boolean>>;\n  handleDefense: () => void;\n  handleAction: () => void;\n}\n\nexport const UnitAction = ({\n  toSelectTarget,\n  setToSelectTarget,\n  handleDefense,\n  handleAction,\n}: IUnitAction): ReactElement => {\n  return (\n    <div className=\"turn-controller\">\n      <button onClick={() => handleAction()}>Deal</button>\n      <button onClick={() => handleDefense()}>Defense</button>\n    </div>\n  );\n};\n","C:\\GH\\testTasks\\game\\src\\components\\SingleUnit\\SingleUnit.tsx",[],"C:\\GH\\testTasks\\game\\src\\classes\\targets\\SingleTarget.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Archimage.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Bandit.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Bishop.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Centaur.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\ElfArcher.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Monk.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Sirena.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\Skeleton.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\models\\SkeletonMage.ts",[],"C:\\GH\\testTasks\\game\\src\\constants\\constants.ts",[],"C:\\GH\\testTasks\\game\\src\\components\\GeneralUnitImage\\GeneralUnitImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitInfo\\UnitInfo.tsx",[],"C:\\GH\\testTasks\\game\\src\\classes\\Unit.ts",["210","211"],"import { IRoleAction } from \"../interfaces/IRoleAction\";\nimport { IAttackRange } from \"../interfaces/IAttackRange\";\nimport { ICountTarget } from \"../interfaces/ICountTarget\";\nimport { MeleeType } from \"./range/MeleeType\";\nimport { SingleTarget } from \"./targets/SingleTarget\";\nimport { Attacker } from \"./actions/attack/Attacker\";\nimport { boardLocation, possibleBoardLocation } from \"../types/types\";\nimport { GameBoardAction } from \"./board/GameBoardAction\";\n\nexport class Unit {\n  private name: string;\n  private hp: number;\n  private maxHP: number;\n  private dealValue: number;\n  private initiative: number;\n  private roleAction: IRoleAction;\n  private rangeType: IAttackRange;\n  private targetBehavior: ICountTarget;\n  private defence: boolean;\n  private originInitiative: number;\n\n  constructor(\n    name?: string,\n    hp?: number,\n    dealValue?: number,\n    initiative?: number,\n    roleAction?: IRoleAction,\n    rangeType?: IAttackRange,\n    targetBehavior?: ICountTarget\n  ) {\n    this.name = name || \"\";\n    this.hp = hp || 0;\n    this.maxHP = hp || 0;\n    this.dealValue = dealValue || 0;\n    this.initiative = initiative || 0;\n    this.roleAction = roleAction || new Attacker();\n    this.rangeType = rangeType || new MeleeType();\n    this.defence = false;\n    this.targetBehavior = targetBehavior || new SingleTarget();\n    this.originInitiative = initiative || 0;\n  }\n\n  getPossibleTargets(\n    boardLocation: boardLocation,\n    gameBoardAction: GameBoardAction\n  ) {\n    return this.rangeType.rangeAttack(boardLocation, gameBoardAction);\n  }\n\n  getTargets(\n    boardLocation: boardLocation,\n    gameBoardAction: GameBoardAction,\n    enemyBoardLocation: possibleBoardLocation\n  ): boardLocation[] {\n    return this.targetBehavior.attackTargets(\n      this.getPossibleTargets(boardLocation, gameBoardAction),\n      enemyBoardLocation\n    );\n  }\n\n  action(\n    boardLocation: boardLocation,\n    gameBoardAction: GameBoardAction,\n    enemyBoardLocation: possibleBoardLocation = null\n  ) {\n    return this.roleAction.action(\n      this,\n      this.getTargets(boardLocation, gameBoardAction, enemyBoardLocation),\n      gameBoardAction\n    );\n  }\n\n  getName(): string {\n    return this.name;\n  }\n\n  getHP(): number {\n    return this.hp;\n  }\n\n  getMaxHp(): number {\n    return this.maxHP;\n  }\n\n  getDealValue(): number {\n    return this.dealValue;\n  }\n\n  getInitiative(): number {\n    return this.initiative;\n  }\n\n  getOriginInitiative(): number {\n    return this.originInitiative;\n  }\n\n  getDefence(): boolean {\n    return this.defence;\n  }\n\n  getCountTarget(): ICountTarget {\n    return this.targetBehavior;\n  }\n\n  getDealerType(): IRoleAction {\n    return this.roleAction;\n  }\n\n  setHp(value: number): void {\n    this.hp = value;\n  }\n\n  setInitiative(value: number): void {\n    this.initiative = value;\n  }\n\n  setIsDefending(value: boolean): void {\n    this.defence = value;\n  }\n}\n","C:\\GH\\testTasks\\game\\src\\classes\\range\\RangeType.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\range\\MeleeType.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\actions\\attack\\Attacker.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\actions\\health\\Healer.ts",[],"C:\\GH\\testTasks\\game\\src\\classes\\actions\\paralyze\\Paralyze.ts",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitDealValue\\UnitDealValue.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitHP\\UnitHP.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\index.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\ArchimageImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\BanditImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\BishopImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\CentaurImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\ElfArcher.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\MonkImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\Siren.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\SkeletonImage.tsx",[],"C:\\GH\\testTasks\\game\\src\\components\\UnitImage\\SkeletonMageImage.tsx",[],{"ruleId":"212","severity":1,"message":"213","line":3,"column":25,"nodeType":"214","messageId":"215","endLine":3,"endColumn":57},{"ruleId":"216","severity":1,"message":"217","line":1,"column":31,"nodeType":"218","messageId":"219","endLine":1,"endColumn":43},{"ruleId":"212","severity":1,"message":"213","line":38,"column":3,"nodeType":"220","messageId":"215","endLine":38,"endColumn":36},{"ruleId":"212","severity":1,"message":"213","line":67,"column":3,"nodeType":"220","messageId":"215","endLine":67,"endColumn":20},{"ruleId":"216","severity":1,"message":"221","line":12,"column":3,"nodeType":"218","messageId":"219","endLine":12,"endColumn":17},{"ruleId":"216","severity":1,"message":"222","line":13,"column":3,"nodeType":"218","messageId":"219","endLine":13,"endColumn":20},{"ruleId":"212","severity":1,"message":"213","line":43,"column":3,"nodeType":"220","messageId":"215","endLine":46,"endColumn":4},{"ruleId":"212","severity":1,"message":"213","line":61,"column":3,"nodeType":"220","messageId":"215","endLine":65,"endColumn":4},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'TypeOfAction' is defined but never used.","Identifier","unusedVar","FunctionExpression","'toSelectTarget' is defined but never used.","'setToSelectTarget' is defined but never used."]