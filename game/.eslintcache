[{"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\index.tsx":"1","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\reportWebVitals.ts":"2","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\store.ts":"3","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\App.tsx":"4","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\reducers\\reduce.ts":"5","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\types\\types.ts":"6","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Game.ts":"7","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\targets\\MultiTarget.ts":"8","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\constants\\constants.ts":"9","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GameOver\\GameOver.tsx":"10","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\InfoPanel\\InfoPanel.tsx":"11","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GameField\\GameField.tsx":"12","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\Instruction\\Instruction.tsx":"13","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Queue.ts":"14","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Randomizer.ts":"15","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\GameBoardAction.ts":"16","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\GameBoard.ts":"17","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\UnitAction.ts":"18","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\Turn\\Turn.tsx":"19","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitAction\\UnitAction.tsx":"20","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\SingleUnit\\SingleUnit.tsx":"21","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\targets\\SingleTarget.ts":"22","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Archimage.ts":"23","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Bandit.ts":"24","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Bishop.ts":"25","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Centaur.ts":"26","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\ElfArcher.ts":"27","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Monk.ts":"28","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Sirena.ts":"29","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\SkeletonMage.ts":"30","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Skeleton.ts":"31","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GeneralUnitImage\\GeneralUnitImage.tsx":"32","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitInfo\\UnitInfo.tsx":"33","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Unit.ts":"34","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\range\\RangeType.ts":"35","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\range\\MeleeType.ts":"36","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\attack\\Attacker.ts":"37","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\health\\Healer.ts":"38","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\paralyze\\Paralyze.ts":"39","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\actions\\action.ts":"40","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitDealValue\\UnitDealValue.tsx":"41","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitHP\\UnitHP.tsx":"42","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\index.tsx":"43","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\ArchimageImage.tsx":"44","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\BanditImage.tsx":"45","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\BishopImage.tsx":"46","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\CentaurImage.tsx":"47","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\ElfArcher.tsx":"48","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\MonkImage.tsx":"49","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\Siren.tsx":"50","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\SkeletonImage.tsx":"51","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\SkeletonMageImage.tsx":"52"},{"size":652,"mtime":1613368504702,"results":"53","hashOfConfig":"54"},{"size":471,"mtime":1613368504703,"results":"55","hashOfConfig":"54"},{"size":237,"mtime":1613368504703,"results":"56","hashOfConfig":"54"},{"size":4200,"mtime":1613368504686,"results":"57","hashOfConfig":"54"},{"size":441,"mtime":1613368504703,"results":"58","hashOfConfig":"54"},{"size":872,"mtime":1613368504704,"results":"59","hashOfConfig":"54"},{"size":1741,"mtime":1613368504687,"results":"60","hashOfConfig":"54"},{"size":276,"mtime":1613368504691,"results":"61","hashOfConfig":"54"},{"size":89,"mtime":1613368504701,"results":"62","hashOfConfig":"54"},{"size":514,"mtime":1613368504693,"results":"63","hashOfConfig":"54"},{"size":1327,"mtime":1613368504694,"results":"64","hashOfConfig":"54"},{"size":1882,"mtime":1613368504692,"results":"65","hashOfConfig":"54"},{"size":613,"mtime":1613368504695,"results":"66","hashOfConfig":"54"},{"size":3173,"mtime":1613368504687,"results":"67","hashOfConfig":"54"},{"size":1622,"mtime":1613368504687,"results":"68","hashOfConfig":"54"},{"size":7113,"mtime":1613368504689,"results":"69","hashOfConfig":"54"},{"size":695,"mtime":1613368504688,"results":"70","hashOfConfig":"54"},{"size":3981,"mtime":1613368504689,"results":"71","hashOfConfig":"54"},{"size":1238,"mtime":1613368504696,"results":"72","hashOfConfig":"54"},{"size":546,"mtime":1613370507854,"results":"73","hashOfConfig":"54"},{"size":1408,"mtime":1613368504695,"results":"74","hashOfConfig":"54"},{"size":553,"mtime":1613368504692,"results":"75","hashOfConfig":"54"},{"size":502,"mtime":1613368504689,"results":"76","hashOfConfig":"54"},{"size":496,"mtime":1613368504689,"results":"77","hashOfConfig":"54"},{"size":488,"mtime":1613368504689,"results":"78","hashOfConfig":"54"},{"size":499,"mtime":1613368504690,"results":"79","hashOfConfig":"54"},{"size":503,"mtime":1613368504690,"results":"80","hashOfConfig":"54"},{"size":462,"mtime":1613368504690,"results":"81","hashOfConfig":"54"},{"size":471,"mtime":1613368504690,"results":"82","hashOfConfig":"54"},{"size":506,"mtime":1613368504690,"results":"83","hashOfConfig":"54"},{"size":501,"mtime":1613368504690,"results":"84","hashOfConfig":"54"},{"size":1836,"mtime":1613368504693,"results":"85","hashOfConfig":"54"},{"size":660,"mtime":1613368504701,"results":"86","hashOfConfig":"54"},{"size":3184,"mtime":1613368504687,"results":"87","hashOfConfig":"54"},{"size":668,"mtime":1613368504691,"results":"88","hashOfConfig":"54"},{"size":988,"mtime":1613368504691,"results":"89","hashOfConfig":"54"},{"size":1000,"mtime":1613368504688,"results":"90","hashOfConfig":"54"},{"size":1092,"mtime":1613368504688,"results":"91","hashOfConfig":"54"},{"size":864,"mtime":1613368504688,"results":"92","hashOfConfig":"54"},{"size":148,"mtime":1613368504703,"results":"93","hashOfConfig":"54"},{"size":965,"mtime":1613368504697,"results":"94","hashOfConfig":"54"},{"size":332,"mtime":1613368504698,"results":"95","hashOfConfig":"54"},{"size":676,"mtime":1613368504700,"results":"96","hashOfConfig":"54"},{"size":164,"mtime":1613368504698,"results":"97","hashOfConfig":"54"},{"size":155,"mtime":1613368504698,"results":"98","hashOfConfig":"54"},{"size":155,"mtime":1613368504699,"results":"99","hashOfConfig":"54"},{"size":158,"mtime":1613368504699,"results":"100","hashOfConfig":"54"},{"size":165,"mtime":1613368504699,"results":"101","hashOfConfig":"54"},{"size":149,"mtime":1613368504699,"results":"102","hashOfConfig":"54"},{"size":152,"mtime":1613368504700,"results":"103","hashOfConfig":"54"},{"size":161,"mtime":1613368504700,"results":"104","hashOfConfig":"54"},{"size":174,"mtime":1613368504700,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"1bc03q0",{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"108"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"108"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"108"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"108"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\index.tsx",[],[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\reportWebVitals.ts",["219"],"import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    void import(\"web-vitals\").then(\r\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\store.ts",["220"],"import { combineReducers, createStore } from 'redux';\r\nimport { isHover } from './reducers/reduce';\r\n\r\nexport function rootReducer(){\r\n  return combineReducers({\r\n    isHover\r\n  })\r\n}\r\n\r\nexport const store = createStore(rootReducer());\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\reducers\\reduce.ts",["221","222"],"import { SET_IS_HOVER } from '../actions/action';\r\nimport { IsActiveHover } from '../../types/types';\r\n\r\nexport const initialHoverState = {\r\n  unitID: null\r\n}\r\n\r\nexport const isHover = (state = initialHoverState, action:IsActiveHover) =>{\r\n    switch (action.type){\r\n      case 'SET_IS_HOVER':{\r\n        return {\r\n          ...state,\r\n          payload:action.payload,\r\n        };\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n};\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\types\\types.ts",["223","224"],"import { Unit } from \"../classes/Unit\";\r\nimport { Queue } from \"../classes/Queue\";\r\nimport { UnitAction } from \"../classes/board/UnitAction\";\r\nimport { SET_IS_HOVER } from '../redux/actions/action';\r\n\r\nexport type BoardLocation = {\r\n  columnNumber: number;\r\n  rowNumber: number;\r\n};\r\n\r\nexport type PossibleBoardLocation = BoardLocation | null;\r\n\r\nexport type PossibleUnit = Unit | null;\r\n\r\nexport type UnitActionType = InstanceType<typeof UnitAction>\r\n\r\nexport type UnitMatrix = Array<Array<PossibleUnit>>;\r\n\r\nexport enum Team {\r\n  OrangeTeam = \"ORANGE_TEAM\",\r\n  RedTeam = \"RED_TEAM\",\r\n}\r\n\r\nexport type QueueSwitcher = InstanceType<typeof Queue>;\r\n\r\nexport enum TypeOfAction {\r\n  Action = \"ACTION\",\r\n  Defence = \"DEFENCE\",\r\n}\r\n\r\nexport type IsActiveHoverAction = {\r\n  isHover: any;\r\n}\r\n\r\nexport type IsActiveHover = {\r\n  type: string,\r\n  payload : { unitID:number } ,\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Game.ts",["225"],"import { BoardLocation, Team, TypeOfAction, PossibleUnit } from \"../types/types\";\r\nimport { Unit } from \"./Unit\";\r\nimport { Queue } from \"./Queue\";\r\nimport { GameBoardAction } from \"./board/GameBoardAction\";\r\nimport { Randomizer } from \"./Randomizer\";\r\nimport { GameBoard } from \"./board/GameBoard\";\r\nimport { UnitAction } from \"./board/UnitAction\";\r\n\r\ntype initialGameData = {\r\n  units: PossibleUnit[][];\r\n  queueSwitcher: Queue;\r\n  unitAction: UnitAction;\r\n};\r\n//this class is responsible for init game and start new game after end of previous\r\nexport class Game {\r\n  static gameBoardAction: GameBoardAction;\r\n  static queueSwitcher: Queue;\r\n\r\n  static start(rowsCount: number, columnsCount: number): initialGameData {\r\n    const randomizer = new Randomizer();\r\n    const gameBoard = new GameBoard(rowsCount, columnsCount);\r\n    gameBoard.fillWithUnits(randomizer.generateGameBoard(rowsCount, columnsCount));\r\n    this.gameBoardAction = new GameBoardAction(gameBoard);\r\n    const units = gameBoard.getBoardMatrix();\r\n    this.queueSwitcher = new Queue(units, randomizer);\r\n    const unitAction = new UnitAction(this.gameBoardAction, gameBoard, this.queueSwitcher);\r\n\r\n    return {\r\n      units,\r\n      queueSwitcher: this.queueSwitcher,\r\n      unitAction,\r\n    };\r\n  }\r\n\r\n  static finish(currentUnit: Unit): { isFinished: boolean; currentTeam: Team } {\r\n    return {\r\n      isFinished: !this.gameBoardAction\r\n        .getAllEnemiesLocation(this.gameBoardAction.getUnitBoardLocation(currentUnit) as BoardLocation)\r\n        .some((enemyLocation) => this.gameBoardAction.isAlive(enemyLocation)),\r\n      currentTeam: this.gameBoardAction.getTeamOfUnit(this.gameBoardAction.getUnitBoardLocation(currentUnit) as BoardLocation),\r\n    };\r\n  }\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\targets\\MultiTarget.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\constants\\constants.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GameOver\\GameOver.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\InfoPanel\\InfoPanel.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GameField\\GameField.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\Instruction\\Instruction.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Queue.ts",["226","227"],"import { Unit } from \"./Unit\";\r\nimport { PossibleUnit } from \"../types/types\";\r\nimport { Randomizer } from \"./Randomizer\";\r\nexport class Queue {\r\n  queueList: Unit[];\r\n  currentUnit: Unit;\r\n  queueSwitcher: Generator<Unit>;\r\n\r\n  constructor(units: PossibleUnit[][], randomizer: Randomizer) {\r\n    this.queueSwitcher = this.queueGenerator();\r\n    this.queueList = this.randomUnitWithEqualInitiative(\r\n      units.filter((aliveUnit) => aliveUnit) as Unit[][]\r\n    ).reduce((accumulator, currentArray) => [\r\n      ...accumulator,\r\n      ...randomizer\r\n        .shuffleListSequence(currentArray),\r\n    ]);\r\n    this.currentUnit = this.queueList[0];\r\n  }\r\n\r\n  skipUnit(): boolean {\r\n    return (\r\n      !this.currentUnit ||\r\n      this.currentUnit.getInitiative() === 0 ||\r\n      this.currentUnit.getHP() <= 0\r\n    );\r\n  }\r\n\r\n  getCurrentUnit(): Unit {\r\n    return this.currentUnit;\r\n  }\r\n\r\n  getUnitOrder(): Unit[] {\r\n    return this.queueList.filter((unit) => this.isUnitCanAct(unit));\r\n  }\r\n\r\n  sortByInitiative(units: Unit[][]) {\r\n    const initiativeList: Unit[] = units.flat();\r\n    return initiativeList.sort((a, b) => {\r\n      return a.getInitiative() - b.getInitiative();\r\n    });\r\n  }\r\n\r\n  randomUnitWithEqualInitiative(units: Unit[][]): Unit[][] {\r\n    const sortedUnitList = this.sortByInitiative(units);\r\n    const splitedByEqualInitiativeArrays: Unit[][] = [];\r\n\r\n    let tempArr = [];\r\n    for (let i = sortedUnitList.length - 1; i >= 0; i -= 1) {\r\n      sortedUnitList[i].setUnitID(i);\r\n      if (\r\n        i !== sortedUnitList.length - 1 &&\r\n        sortedUnitList[i].getInitiative() !== sortedUnitList[i + 1].getInitiative()\r\n      ) {\r\n        splitedByEqualInitiativeArrays.push(tempArr);\r\n        tempArr = [];\r\n      }\r\n      tempArr.push(sortedUnitList[i]);\r\n      if (i === 0) {\r\n        splitedByEqualInitiativeArrays.push(tempArr);\r\n      }\r\n\r\n    }\r\n    return splitedByEqualInitiativeArrays;\r\n  }\r\n\r\n  *queueGenerator() {\r\n    while (true) {\r\n      yield* this.queueList;\r\n    }\r\n  }\r\n\r\n  isUnitCanAct(unit: Unit): boolean {\r\n    return unit.getHP() > 0 && unit.getInitiative() > 0;\r\n  }\r\n\r\n  next(): Unit {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    this.currentUnit = this.queueSwitcher.next().value;\r\n    while (this.currentUnit?.getInitiative() === 0) {\r\n      this.deleteParalyzation();\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      this.currentUnit = this.queueSwitcher.next().value;\r\n    }\r\n    while (this.skipUnit()) {\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n      this.currentUnit = this.queueSwitcher.next().value;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    if (this.currentUnit === this.queueList.filter(this.isUnitCanAct)[0]) {\r\n      this.newRound();\r\n    }\r\n\r\n    return this.currentUnit;\r\n  }\r\n\r\n  newRound(): void {\r\n    this.queueList\r\n      .filter((unit) => unit && unit.getHP() > 0)\r\n      .forEach((unit) => {\r\n        unit.setIsDefending(false);\r\n      });\r\n  }\r\n\r\n  deleteParalyzation(): void {\r\n    this.currentUnit.setInitiative(this.currentUnit.getOriginInitiative());\r\n  }\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Randomizer.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\GameBoardAction.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\GameBoard.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\board\\UnitAction.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\Turn\\Turn.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitAction\\UnitAction.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\SingleUnit\\SingleUnit.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\targets\\SingleTarget.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Archimage.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Bandit.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Bishop.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Centaur.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\ElfArcher.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Monk.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Sirena.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\SkeletonMage.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\models\\Skeleton.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\GeneralUnitImage\\GeneralUnitImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitInfo\\UnitInfo.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\Unit.ts",["228","229"],"import { IRoleAction } from \"../interfaces/IRoleAction\";\r\nimport { IAttackRange } from \"../interfaces/IAttackRange\";\r\nimport { ICountTarget } from \"../interfaces/ICountTarget\";\r\nimport { MeleeType } from \"./range/MeleeType\";\r\nimport { SingleTarget } from \"./targets/SingleTarget\";\r\nimport { Attacker } from \"./actions/attack/Attacker\";\r\nimport { BoardLocation, PossibleBoardLocation } from \"../types/types\";\r\nimport { GameBoardAction } from \"./board/GameBoardAction\";\r\n\r\nexport class Unit {\r\n  private name: string;\r\n  private hp: number;\r\n  private maxHP: number;\r\n  private dealValue: number;\r\n  private initiative: number;\r\n  private roleAction: IRoleAction;\r\n  private rangeType: IAttackRange;\r\n  private targetBehavior: ICountTarget;\r\n  private defence: boolean;\r\n  private originInitiative: number;\r\n  private unitID: number;\r\n\r\n  constructor(\r\n    name?: string,\r\n    hp?: number,\r\n    dealValue?: number,\r\n    initiative?: number,\r\n    roleAction?: IRoleAction,\r\n    rangeType?: IAttackRange,\r\n    targetBehavior?: ICountTarget\r\n  ) {\r\n    this.name = name || \"\";\r\n    this.hp = hp || 0;\r\n    this.maxHP = hp || 0;\r\n    this.dealValue = dealValue || 0;\r\n    this.initiative = initiative || 0;\r\n    this.roleAction = roleAction || new Attacker();\r\n    this.rangeType = rangeType || new MeleeType();\r\n    this.defence = false;\r\n    this.targetBehavior = targetBehavior || new SingleTarget();\r\n    this.originInitiative = initiative || 0;\r\n    this.unitID = 0;\r\n  }\r\n\r\n  getPossibleTargets(\r\n    boardLocation: BoardLocation,\r\n    gameBoardAction: GameBoardAction\r\n  ) {\r\n    return this.rangeType.rangeAttack(boardLocation, gameBoardAction);\r\n  }\r\n\r\n  getTargets(\r\n    boardLocation: BoardLocation,\r\n    gameBoardAction: GameBoardAction,\r\n    enemyBoardLocation: PossibleBoardLocation\r\n  ): BoardLocation[] {\r\n    return this.targetBehavior.attackTargets(\r\n      this.getPossibleTargets(boardLocation, gameBoardAction),\r\n      enemyBoardLocation\r\n    );\r\n  }\r\n\r\n  action(\r\n    boardLocation: BoardLocation,\r\n    gameBoardAction: GameBoardAction,\r\n    enemyBoardLocation: PossibleBoardLocation = null\r\n  ) {\r\n    return this.roleAction.action(\r\n      this,\r\n      this.getTargets(boardLocation, gameBoardAction, enemyBoardLocation),\r\n      gameBoardAction\r\n    );\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  getHP(): number {\r\n    return this.hp;\r\n  }\r\n\r\n  getMaxHp(): number {\r\n    return this.maxHP;\r\n  }\r\n\r\n  getDealValue(): number {\r\n    return this.dealValue;\r\n  }\r\n\r\n  getInitiative(): number {\r\n    return this.initiative;\r\n  }\r\n\r\n  getUnitID(): number {\r\n    return this.unitID\r\n  }\r\n\r\n  getOriginInitiative(): number {\r\n    return this.originInitiative;\r\n  }\r\n\r\n  getDefence(): boolean {\r\n    return this.defence;\r\n  }\r\n\r\n  getCountTarget(): ICountTarget {\r\n    return this.targetBehavior;\r\n  }\r\n\r\n  getDealerType(): IRoleAction {\r\n    return this.roleAction;\r\n  }\r\n\r\n  setHp(value: number): void {\r\n    this.hp = value;\r\n  }\r\n\r\n  setInitiative(value: number): void {\r\n    this.initiative = value;\r\n  }\r\n\r\n  setIsDefending(value: boolean): void {\r\n    this.defence = value;\r\n  }\r\n\r\n  setUnitID(value: number): void{\r\n    this.unitID = value;\r\n  }\r\n}\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\range\\RangeType.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\range\\MeleeType.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\attack\\Attacker.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\health\\Healer.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\classes\\actions\\paralyze\\Paralyze.ts",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\redux\\actions\\action.ts",["230"],"export const SET_IS_HOVER = 'SET_IS_HOVER';\r\n\r\nexport const setHoverIsTrue = (unitID:number) => ({\r\n  type: SET_IS_HOVER,\r\n  payload: unitID,\r\n});\r\n","C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitDealValue\\UnitDealValue.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitHP\\UnitHP.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\index.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\ArchimageImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\BanditImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\BishopImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\CentaurImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\ElfArcher.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\MonkImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\Siren.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\SkeletonImage.tsx",[],"C:\\Users\\User\\Documents\\GitHub\\testTasksNEw\\game\\src\\components\\UnitImage\\SkeletonMageImage.tsx",[],{"ruleId":"231","severity":1,"message":"232","line":3,"column":25,"nodeType":"233","messageId":"234","endLine":3,"endColumn":57},{"ruleId":"231","severity":1,"message":"232","line":4,"column":8,"nodeType":"235","messageId":"234","endLine":4,"endColumn":30},{"ruleId":"236","severity":1,"message":"237","line":1,"column":10,"nodeType":"238","messageId":"239","endLine":1,"endColumn":22},{"ruleId":"231","severity":1,"message":"232","line":8,"column":24,"nodeType":"233","messageId":"234","endLine":8,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":32,"column":12,"nodeType":"242","messageId":"243","endLine":32,"endColumn":15,"suggestions":"244"},{"ruleId":"236","severity":1,"message":"245","line":1,"column":31,"nodeType":"238","messageId":"239","endLine":1,"endColumn":43},{"ruleId":"231","severity":1,"message":"232","line":37,"column":3,"nodeType":"246","messageId":"234","endLine":37,"endColumn":36},{"ruleId":"231","severity":1,"message":"232","line":67,"column":3,"nodeType":"246","messageId":"234","endLine":67,"endColumn":20},{"ruleId":"231","severity":1,"message":"232","line":45,"column":3,"nodeType":"246","messageId":"234","endLine":48,"endColumn":4},{"ruleId":"231","severity":1,"message":"232","line":63,"column":3,"nodeType":"246","messageId":"234","endLine":67,"endColumn":4},{"ruleId":"231","severity":1,"message":"232","line":3,"column":31,"nodeType":"233","messageId":"234","endLine":3,"endColumn":49},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","@typescript-eslint/no-unused-vars","'SET_IS_HOVER' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["247","248"],"'TypeOfAction' is defined but never used.","FunctionExpression",{"messageId":"249","fix":"250","desc":"251"},{"messageId":"252","fix":"253","desc":"254"},"suggestUnknown",{"range":"255","text":"256"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"255","text":"257"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[777,780],"unknown","never"]